<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

<!-- spring可以自动去扫描base-pack下面的包或者子包下面的java文件，
如果扫描到有Spring的相关注解的类，则把这些类注册为Spring的bean -->

	<context:component-scan base-package="com" />
	<!-- 启用spring的扫描功能
	以便注册带有@Controller、@Service、@repository、@Component等注解的类成为Spring的Bean -->		
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		id="internalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/jsp/" />
		<!-- 后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 处理静态 -->
	<mvc:default-servlet-handler />
	<!-- 处理动态 -->
	<mvc:annotation-driven />


	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- MySQL数据库驱动 -->
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<!-- 连接数据库的URL -->
		<property name="url"
			value="jdbc:mysql://localhost:3306/db_student_ssm?characterEncoding=utf8" />
		<!-- 连接数据库的用户名 -->
		<property name="username" value="root" />
		<!-- 连接数据库的密码 -->
		<property name="password" value="123456" />
	</bean>
	<!-- 配置JDBC模板 -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 为数据源添加事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 为事务管理器注册注解驱动 -->
	<tx:annotation-driven
		transaction-manager="txManager" />


	<!-- 配置MyBatis工厂，同时指定数据源，并与MyBatis完美整合 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- configLocation的属性值为MyBatis的核心配置文件 -->
		<property name="configLocation"
			value="classpath:com/mybatis/mybatis-config.xml" />
	</bean>
	<!--Mapper代理开发，使用Spring自动扫描MyBatis的接口并装配Spring将指定包中所有被@Mapper注解标注的接口自动装配为MyBatis的映射接口） -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- mybatis-spring组件的扫描器。com.dao只需要接口（接口方法与SQL映射文件中相同） -->
		<property name="basePackage" value="com.dao" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

	<!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8" p:maxUploadSize="10000000"
		p:uploadTempDir="fileUpload/temp">

	</bean>
	<!-- 配置消息属性文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/resource/i18n</value>
			</list>
		</property>
		<!-- 资源文件编码 -->
		<property name="fileEncodings" value="utf-8"></property>
		<!-- 设置缓存时间 -->
		<property name="cacheSeconds" value="120"></property>
	</bean>

	<!-- 国际化功能 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="zh_CN"></property>
	</bean>


	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<mvc:interceptor>
			<!-- 配置拦截器作用的路径 -->
			<mvc:mapping path="/grade/**" />
			<!-- 定义在<mvc:interceptor>元素中，表示匹配指定路径的请求才进行拦截 -->
			<bean class="com.interceptor.GradeInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>



	<!-- 后台访问拦截器 -->
	<mvc:resources location="/images/" mapping="/images/**"></mvc:resources>
	<mvc:resources location="/dist/css/" mapping="/dist/css/**"></mvc:resources>
	<mvc:resources location="/dist/fonts/" mapping="/dist/fonts/**"></mvc:resources>
	<mvc:resources location="/dist/js/" mapping="/dist/js/**"></mvc:resources>
	<mvc:resources location="/uploadfile/" mapping="/uploadfile/**"></mvc:resources>


</beans>